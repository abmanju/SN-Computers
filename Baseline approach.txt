import pandas as pd
# Reinitialize file paths
file_paths = {
    "Danapur": "/mnt/data/Danapur2021.xlsx",
    "Muradpur": "/mnt/data/Muradpur2021.xlsx",
    "Planetarium": "/mnt/data/Planetarium2021.xlsx",
    "Rajbansi": "/mnt/data/Rajbansi2021.xlsx",
    "Samanpura": "/mnt/data/Samanpura2021.xlsx",
    "Shikarpur": "/mnt/data/Shikarpur2021.xlsx"
}

# Function to load and preprocess each dataset
def preprocess_file(file_path, location_name):
    df = pd.read_excel(file_path)
    
    # Rename first column as "Day" (assuming it's the day of the month)
    df.rename(columns={df.columns[0]: "Day"}, inplace=True)
    
    # Convert months as columns into rows (long format)
    df_long = df.melt(id_vars=["Day"], var_name="Month", value_name="Pollution Value")
    
    # Month mapping
    month_mapping = {
        "January": 1, "February": 2, "March": 3, "April": 4, "May": 5, "June": 6,
        "July": 7, "August": 8, "September": 9, "October": 10, "November": 11, "December": 12
    }
    df_long["Month"] = df_long["Month"].map(month_mapping)
    
    # Assign year
    df_long["Year"] = 2021  # Assuming all data is from 2021
    
    # Create proper Date column
    df_long["Date"] = pd.to_datetime(df_long[["Year", "Month", "Day"]], errors='coerce')
    
    # Assign location name
    df_long["Location"] = location_name
    
    # Drop invalid rows (where Date could not be created)
    df_long.dropna(subset=["Date"], inplace=True)
    
    # Keep relevant columns
    return df_long[["Date", "Location", "Pollution Value"]]

# Process all files and merge into one dataset
df_combined = pd.concat([preprocess_file(path, loc) for loc, path in file_paths.items()], ignore_index=True)

# Handle missing values (if any) using forward fill
df_combined.fillna(method='ffill', inplace=True)

# Normalize pollution values for training stability
df_combined["Pollution Value"] = (df_combined["Pollution Value"] - df_combined["Pollution Value"].mean()) / df_combined["Pollution Value"].std()

# Display processed data sample
df_combined.head()
